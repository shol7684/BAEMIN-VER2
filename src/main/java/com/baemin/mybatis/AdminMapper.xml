<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="admin">

	<select id="orderList" resultType="OrderList">
    SELECT RESULT.* FROM (
	    SELECT ROWNUM RN, T.* FROM (
	        SELECT o.*, s.store_name, s.delevery_tip, c.* FROM 
	           (SELECT * FROM 
	              (SELECT COUNT(*) COUNT1 FROM ( SELECT  delevery_status FROM bm_order_non_user  UNION ALL SELECT delevery_status FROM bm_order_user ) WHERE delevery_status = '주문접수 대기 중' ),
	              (SELECT COUNT(*) COUNT2 FROM ( SELECT  delevery_status FROM bm_order_non_user  UNION ALL SELECT delevery_status FROM bm_order_user ) WHERE delevery_status LIKE '배달 준비 중%' )) C
	           ,(SELECT
	                o.order_num, o.store_id, o.user_id, o.order_date, o.pay_method, o.delevery_status, o.phone, o.delevery_address1,
	                o.delevery_address2, o.delevery_address3, o.imp_uid, o.total_price, o.used_point, o.request, d.food_info
	            FROM bm_order_user o 
                LEFT JOIN  
                	(SELECT  ORDER_NUM, 
	                             LISTAGG(FOOD_INFO, '/') food_info
	                    FROM     BM_ORDER_DETAIL_USER 
	                    GROUP BY ORDER_NUM) d
                ON o.order_num = d.order_num
                
	            UNION ALL
	             
	            SELECT
	                o.order_num, o.store_id, o.user_id, o.order_date, o.pay_method, o.delevery_status, o.phone, o.delevery_address1,
	                o.delevery_address2, o.delevery_address3, o.imp_uid, o.total_price, o.used_point, o.request, d.food_info
	            FROM bm_order_non_user o 
                LEFT JOIN 
	                (SELECT  ORDER_NUM, 
	                             LISTAGG(FOOD_INFO, '/') food_info
	                    FROM     BM_ORDER_DETAIL_NON_USER 
	                    GROUP BY ORDER_NUM) d
                 
                ON o.ORDER_NUM = d.ORDER_NUM ) O
	        LEFT JOIN
	            BM_STORE S
	        ON 
	            O.STORE_ID = S.ID
	        WHERE 
	            DELEVERY_STATUS LIKE '${list }%'
	        ORDER BY ORDER_DATE 
	    ) T
	) RESULT WHERE RN BETWEEN #{pageStart } AND #{pageEnd }
	</select>
	
	
	
	<select id="storeList" resultType="Store">
	SELECT RESULT.* FROM (	
		SELECT ROWNUM RN, COUNT(*)OVER() LIST_COUNT, T.* FROM (
		    SELECT 
		        S.ID, S.CATEGORY, S.STORE_NAME, S.STORE_ADDRESS1, S.STORE_ADDRESS2, S.STORE_ADDRESS3
		        ,S.STORE_PHONE, S.STORE_IMG, S.STORE_THUMB, S.OPENING_TIME, S.CLOSING_TIME, S.MIN_DELEVERY, S.DELEVERY_TIME, S.DELEVERY_TIP, S.STORE_DES
		        ,C.ORDER_COUNT, R.SCORE, R.REVIEW_COUNT, R.BOSS_COMMENT_COUNT 
		    FROM 
	            BM_STORE S
	        LEFT JOIN
	            ( SELECT store_id, ROUND(AVG(score),1) SCORE, count(review_content) review_count, count(boss_comment) boss_comment_count FROM bm_review GROUP BY store_id ) R
	        ON S.ID = R.STORE_ID
	        LEFT JOIN
	            ( SELECT store_id, SUM(order_count) order_count from (
	                SELECT store_id, count(*) order_count FROM bm_order_user GROUP BY store_id
	                    UNION ALL
	                SELECT store_id, count(*) order_count FROM bm_order_non_user GROUP BY store_id ) GROUP BY store_id ) C 
	        ON S.ID = C.STORE_ID
		) T 
		<if test="keyword != null">
			WHERE store_name like '%${keyword}%' 
		</if>
	) RESULT WHERE RN BETWEEN #{p.pageStart } AND #{p.pageEnd }   
	
	</select>
	
	
	<insert id="storeRegist">
		INSERT INTO bm_store (
		    id,
		    category,
		    store_name,
		    store_address1,
		    store_address2,
		    store_address3,
		    store_phone,
		    store_img,
		    store_thumb,
		    opening_time,
		    closing_time,
		    min_delevery,
		    delevery_time,
		    delevery_tip,
		    store_des
		) VALUES (
		    STORE_ID_SEQ.NEXTVAL
		    ,#{category }
		    ,#{storeName }
		    ,#{storeAddress1 }
		    ,#{storeAddress2 }
		    ,#{storeAddress3 }
		    ,#{storePhone }
		    ,#{storeImg }
		    ,#{storeThumb }
		    ,#{openingTime }
		    ,#{closingTime }
		    ,#{minDelevery }
		    ,#{deleveryTime }
		    ,#{deleveryTip }
		    ,#{storeDes }
		)
	
	</insert>
	
	
	
	<update id="bossComment">
		UPDATE BM_REVIEW SET
			BOSS_COMMENT = #{bossComment }
		WHERE
			ORDER_NUM = #{orderNum }  			 
	</update>
	
	
	
	<delete id="menuDelete">
		DELETE BM_FOOD WHERE STORE_ID = ${storeId } AND ID IN 
		
		<foreach collection="deleteNumber" item="arr" open="(" close=")" separator="," >
			${arr }
		</foreach>
	
	</delete>
	
	
	<insert id="addMenu">
	
	<selectKey keyProperty="id" resultType="long" order="BEFORE" >
		SELECT FOOD_ID_SEQ.NEXTVAL FROM DUAL
	</selectKey>
	
		INSERT INTO BM_FOOD (
			ID
			,STORE_ID
			,FOOD_NAME
			,FOOD_PRICE
			,FOOD_DEC
			,FOOD_IMG
			,FOOD_THUMB
		) VALUES (
			#{id }
			,#{storeId }
			,#{foodName }
			,#{foodPrice }
			,#{foodDec }
			,#{foodImg }
			,#{foodThumb }
		)
	</insert>
	
	
	<insert id="addMenuOption">
		INSERT INTO BM_FOOD_OPTION (
			ID
			,FOOD_ID
			,OPTION_NAME
			,OPTION_PRICE
		) VALUES (
			OPTION_ID_SEQ.NEXTVAL
			,#{foodId }
			,#{foodOption }
			,#{foodOptionPrice }
		)
	</insert>
	
	<insert id="modifyMenuOption">
		UPDATE BM_FOOD_OPTION SET
			OPTION_NAME = #{foodOption }
			,OPTION_PRICE = #{foodOptionPrice }
		WHERE ID = #{optionId }
	</insert>
	
	
	<delete id="deleteOption">
		DELETE BM_FOOD_OPTION WHERE ID = #{optionId }
	</delete>
	
	
	
	<update id="storeModify">
		UPDATE BM_STORE SET
			CATEGORY = #{category }
			,STORE_NAME = #{storeName }
			,STORE_ADDRESS1 = #{storeAddress1 }
			,STORE_ADDRESS2 = #{storeAddress2 }
			,STORE_ADDRESS3 = #{storeAddress3 }
			,STORE_PHONE = #{storePhone }
			,STORE_IMG = #{storeImg }
			,STORE_THUMB = #{storeThumb }
			,OPENING_TIME = #{openingTime }
			,CLOSING_TIME = #{closingTime }
			,MIN_DELEVERY = #{minDelevery }
			,DELEVERY_TIME = #{deleveryTime }
			,DELEVERY_TIP = #{deleveryTip }
			,STORE_DES = #{storeDes }
		WHERE
		    ID = #{id }  
	</update>
	
	
	<update id="orderAccept">
		<if test="userId == 0">
			UPDATE BM_ORDER_NON_USER SET
		</if>
		<if test="userId != 0">
			UPDATE BM_ORDER_USER SET
		</if>
			DELEVERY_STATUS = '배달 준비 중(약 ${time}분 후에 도착)'
			WHERE ORDER_NUM = #{orderNum }
	</update>
	
	
	<update id="orderCancle">
		<if test="userId == 0">
			UPDATE BM_ORDER_NON_USER SET 
		</if>
		<if test="userId != 0">
			UPDATE BM_ORDER_USER SET
		</if>
			DELEVERY_STATUS = #{cancleReason }
			WHERE ORDER_NUM = #{orderNum }
	
	</update>
	
	
	
	<update id="orderComplete">
		<if test="userId == 0">
			UPDATE BM_ORDER_NON_USER SET 
		</if>
		<if test="userId != 0">
			UPDATE BM_ORDER_USER SET
		</if>
			DELEVERY_STATUS = '배달 완료'
			WHERE ORDER_NUM = #{orderNum }
	</update>
	
	
	
	<select id="selectCard" resultType="map">
		SELECT POINT "point", INFO "info" FROM BM_GIFT_CARD WHERE GIFT_CARD_NUM = #{giftCardNum }
	</select>
	
	
	<insert id="pointUpdate" >
		INSERT INTO BM_POINT (
			USER_ID
			,INFO
			,POINT
		) VALUES (
			#{userId }
			,#{info }
			,#{point }
		)
	</insert>
	
	
	<select id="salesYear" resultType="Sales">
		      
   	SELECT	TO_DATE(ORDER_DATE, 'YYYY-MM') ORDER_DATE
   			,SUM(TOTAL_PRICE) TOTAL 
	FROM 
			(SELECT		OU.ORDER_NUM
	        			,TO_CHAR(OU.ORDER_DATE, 'YYYY-MM') ORDER_DATE
	        			,OU.TOTAL_PRICE
	    	FROM		BM_ORDER_USER OU
	    	LEFT JOIN	BM_ORDER_DETAIL_USER OUD
	    	ON			OU.ORDER_NUM = OUD.ORDER_NUM
    UNION ALL
	     	SELECT		ONU.ORDER_NUM
	        			,TO_CHAR(ONU.ORDER_DATE, 'YYYY-MM') ORDER_DATE
	        			,ONU.TOTAL_PRICE
	    	FROM		BM_ORDER_NON_USER ONU
	    	LEFT JOIN	BM_ORDER_DETAIL_NON_USER ONUD
	    	ON			ONU.ORDER_NUM = ONUD.ORDER_NUM    
		    ) R
		    
    WHERE	ORDER_DATE BETWEEN TO_CHAR(TRUNC(SYSDATE, 'YYYY'), 'YYYY-MM') 
    AND 	TO_CHAR(TRUNC(SYSDATE, 'YYYY')+364, 'YYYY-MM')
    GROUP BY ROLLUP(ORDER_DATE)
	
	
<!-- 	SELECT 
	   	    SUM( CASE WHEN ORDER_DATE BETWEEN TO_DATE('2021-01-01') AND LAST_DAY('2021-01-01') THEN TOTAL_PRICE ELSE 0 END) JAN
	    ,SUM( CASE WHEN ORDER_DATE BETWEEN TO_DATE('2021-02-01') AND LAST_DAY('2021-02-01') THEN TOTAL_PRICE ELSE 0 END) FEB
	    ,SUM( CASE WHEN ORDER_DATE BETWEEN TO_DATE('2021-03-01') AND LAST_DAY('2021-03-01') THEN TOTAL_PRICE ELSE 0 END) MAR
	    ,SUM( CASE WHEN ORDER_DATE BETWEEN TO_DATE('2021-04-01') AND LAST_DAY('2021-04-01') THEN TOTAL_PRICE ELSE 0 END) APR
	    ,SUM( CASE WHEN ORDER_DATE BETWEEN TO_DATE('2021-05-01') AND LAST_DAY('2021-05-01') THEN TOTAL_PRICE ELSE 0 END) MAY
	    ,SUM( CASE WHEN ORDER_DATE BETWEEN TO_DATE('2021-06-01') AND LAST_DAY('2021-06-01') THEN TOTAL_PRICE ELSE 0 END) JUN
	    ,SUM( CASE WHEN ORDER_DATE BETWEEN TO_DATE('2021-07-01') AND LAST_DAY('2021-07-01') THEN TOTAL_PRICE ELSE 0 END) JUL
	    ,SUM( CASE WHEN ORDER_DATE BETWEEN TO_DATE('2021-08-01') AND LAST_DAY('2021-08-01') THEN TOTAL_PRICE ELSE 0 END) AUG
	    ,SUM( CASE WHEN ORDER_DATE BETWEEN TO_DATE('2021-09-01') AND LAST_DAY('2021-09-01') THEN TOTAL_PRICE ELSE 0 END) SEP
	    ,SUM( CASE WHEN ORDER_DATE BETWEEN TO_DATE('2021-10-01') AND LAST_DAY('2021-10-01') THEN TOTAL_PRICE ELSE 0 END) OCT
	    ,SUM( CASE WHEN ORDER_DATE BETWEEN TO_DATE('2021-11-01') AND LAST_DAY('2021-11-01') THEN TOTAL_PRICE ELSE 0 END) NOB
	    ,SUM( CASE WHEN ORDER_DATE BETWEEN TO_DATE('2021-12-01') AND LAST_DAY('2021-12-01') THEN TOTAL_PRICE ELSE 0 END) DEC
	    ,SUM( CASE WHEN ORDER_DATE BETWEEN TO_DATE('2021-01-01') AND LAST_DAY('2021-12-01') THEN TOTAL_PRICE ELSE 0 END) TOTAL
	FROM (
	    SELECT 
	        OU.ORDER_NUM
	        ,OU.ORDER_DATE
	        ,OUD.TOTAL_PRICE
	    FROM
	        BM_ORDER_USER OU
	    LEFT JOIN
	        BM_ORDER_DETAIL_USER OUD
	    ON 
	        OU.ORDER_NUM = OUD.ORDER_NUM
	    
    UNION ALL
	    
	     SELECT 
	        ONU.ORDER_NUM
	        ,ONU.ORDER_DATE
	        ,ONUD.TOTAL_PRICE
	    FROM
	        BM_ORDER_NON_USER ONU
	    LEFT JOIN
	        BM_ORDER_DETAIL_NON_USER ONUD
	    ON 
	        ONU.ORDER_NUM = ONUD.ORDER_NUM    
	        
	   )  -->
	</select>
	
	
	<select id="salesMonth" resultType="Sales">
	SELECT	ORDER_DATE
	   		,SUM(TOTAL_PRICE) TOTAL
    FROM 	(SELECT		OU.ORDER_NUM
        				,TO_CHAR(OU.ORDER_DATE, 'YYYY-MM-DD') ORDER_DATE
        				,OU.TOTAL_PRICE
    		FROM		BM_ORDER_USER OU
	    	LEFT JOIN	BM_ORDER_DETAIL_USER OUD
	    	ON			OU.ORDER_NUM = OUD.ORDER_NUM
    UNION ALL
	    	SELECT		ONU.ORDER_NUM
	        			,TO_CHAR(ONU.ORDER_DATE, 'YYYY-MM-DD') ORDER_DATE
	        			,ONU.TOTAL_PRICE
	    	FROM		BM_ORDER_NON_USER ONU
	    	LEFT JOIN	BM_ORDER_DETAIL_NON_USER ONUD
	    	ON			ONU.ORDER_NUM = ONUD.ORDER_NUM
	    	) 
	WHERE 
		<if test="time.equals('month') and month == null">
   		ORDER_DATE BETWEEN TRUNC(SYSDATE, 'MM') AND LAST_DAY(SYSDATE)
		</if>
		
		<if test="time.equals('month') and month != null">
		ORDER_DATE BETWEEN TRUNC(TO_DATE('${month}-1'), 'MM') AND LAST_DAY('${month}-1')	
		</if>
		
		<if test="time.equals('week')">
		ORDER_DATE BETWEEN TRUNC(SYSDATE, 'IW') AND TRUNC(SYSDATE+7, 'IW')-1	
		</if>
		
	GROUP BY ROLLUP(ORDER_DATE)
	ORDER BY ORDER_DATE
	</select>
	
	<!-- ORDER_DATE BETWEEN TRUNC(SYSDATE, 'IW') AND TRUNC (SYSDATE, 'IW')+7 -->
	
	
	<update id="modifyMenu">
		UPDATE	BM_FOOD 
		SET		STORE_ID = #{storeId }
			    ,FOOD_NAME = #{foodName }
			    ,FOOD_PRICE = #{foodPrice }
			    ,FOOD_DEC = #{foodDec }
			    ,FOOD_IMG = #{foodImg }
			    ,FOOD_THUMB = #{foodThumb }
		WHERE	ID = #{id }
	
	
	</update>
	
	
		
</mapper>
   
   
   
   
   
   