<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="admin">

	<select id="orderList" resultType="OrderList">
	SELECT O.*,S.STORE_NAME,C.* FROM 
	   ( SELECT * FROM 
		  ( SELECT COUNT(*) COUNT1 FROM ( SELECT  * FROM bm_order_non_user  UNION ALL SELECT * FROM bm_order_user ) WHERE delevery_status = '주문접수 대기 중' ),
          ( SELECT COUNT(*) COUNT2 FROM ( SELECT  * FROM bm_order_non_user  UNION ALL SELECT * FROM bm_order_user ) WHERE delevery_status = '처리 중' ),
          ( SELECT COUNT(*) COUNT3 FROM ( SELECT  * FROM bm_order_non_user  UNION ALL SELECT * FROM bm_order_user ) WHERE delevery_status = '완료' )) C,	
	   ( SELECT
		    U.order_num, U.user_id, U.order_date, U.pay_method, U.delevery_status, U.phone, U.delevery_address1,
		    U.delevery_address2, U.delevery_address3, UD.store_id, UD.amount, UD.used_point, UD.food_price,
		    UD.total_price, UD.food_info, UD.request
		FROM bm_order_user U LEFT JOIN     
		    bm_order_detail_user UD ON  U.ORDER_NUM = UD.ORDER_NUM
		    
		  UNION ALL 
		 
		SELECT
		    NU.order_num, NU.user_id, NU.order_date, NU.pay_method, NU.delevery_status, NU.phone, NU.delevery_address1,
		    NU.delevery_address2, NU.delevery_address3, NUD.store_id, NUD.amount, NUD.used_point, NUD.food_price,
		    NUD.total_price, NUD.food_info, NUD.request
		FROM bm_order_non_user NU LEFT JOIN 
		    bm_order_detail_non_user NUD ON  NU.ORDER_NUM = NUD.ORDER_NUM  
	) O
	LEFT JOIN
	    BM_STORE S
	ON 
		O.STORE_ID = S.ID
	WHERE 
		DELEVERY_STATUS = #{list }
	ORDER BY ORDER_DATE
	</select>
	
	
	
	<select id="storeList" resultType="Store">
	SELECT * FROM 
		BM_STORE S
    LEFT JOIN
        ( SELECT store_id, ROUND(AVG(score),1) SCORE, count(review_content) review_count, count(boss_comment) boss_comment_count FROM bm_review GROUP BY store_id ) r 
    ON S.ID = R.STORE_ID
    LEFT JOIN
        ( SELECT store_id, SUM(order_count) order_count from (
			SELECT store_id, count(*) order_count FROM bm_order_detail_user GROUP BY store_id
				UNION ALL
			SELECT store_id, count(*) order_count FROM bm_order_detail_non_user GROUP BY store_id ) GROUP BY store_id ) C 
    ON
        S.ID = C.STORE_ID    
	
	</select>
	
	
	<insert id="storeRegist">
		INSERT INTO bm_store (
		    id,
		    category,
		    store_name,
		    store_address1,
		    store_address2,
		    store_address3,
		    store_phone,
		    store_img,
		    store_thumb,
		    opening_time,
		    closing_time,
		    min_delevery,
		    delevery_time,
		    delevery_tip,
		    store_des
		) VALUES (
		    STORE_ID_SEQ.NEXTVAL
		    ,#{category }
		    ,#{storeName }
		    ,#{storeAddress1 }
		    ,#{storeAddress2 }
		    ,#{storeAddress3 }
		    ,#{storePhone }
		    ,#{storeImg }
		    ,#{storeThumb }
		    ,#{openingTime }
		    ,#{closingTime }
		    ,#{minDelevery }
		    ,#{deleveryTime }
		    ,#{deleveryTip }
		    ,#{storeDes }
		)
	
	</insert>
	
	
	
	<update id="bossComment">
		UPDATE BM_REVIEW SET
			BOSS_COMMENT = #{bossComment }
		WHERE
			ORDER_NUM = #{orderNum }  			 
	</update>
	
	
	
	<delete id="menuDelete">
		DELETE BM_FOOD WHERE STORE_ID = ${storeId } AND ID IN 
		
		<foreach collection="deleteNumber" item="arr" open="(" close=")" separator="," >
			${arr }
		</foreach>
	
	</delete>
	
	
	<insert id="addMenu">
	
	<selectKey keyProperty="id" resultType="long" order="BEFORE" >
		SELECT FOOD_ID_SEQ.NEXTVAL FROM DUAL
	</selectKey>
	
		INSERT INTO BM_FOOD (
			ID
			,STORE_ID
			,FOOD_NAME
			,FOOD_PRICE
			,FOOD_DEC
			,FOOD_IMG
			,FOOD_THUMB
		) VALUES (
			#{id }
			,#{storeId }
			,#{foodName }
			,#{foodPrice }
			,#{foodDec }
			,#{foodImg }
			,#{foodThumb }
		)
	</insert>
	
	
	<insert id="addMenuOption">
		INSERT INTO BM_FOOD_OPTION (
			ID
			,FOOD_ID
			,OPTION_NAME
			,OPTION_PRICE
		) VALUES (
			OPTION_ID_SEQ.NEXTVAL
			,#{foodId }
			,#{foodOption }
			,#{foodOptionPrice }
		)
	</insert>
	
	
	
	<update id="storeModify">
		UPDATE BM_STORE SET
			CATEGORY = #{category }
			,STORE_NAME = #{storeName }
			,STORE_ADDRESS1 = #{storeAddress1 }
			,STORE_ADDRESS2 = #{storeAddress2 }
			,STORE_ADDRESS3 = #{storeAddress3 }
			,STORE_PHONE = #{storePhone }
			,STORE_IMG = #{storeImg }
			,STORE_THUMB = #{storeThumb }
			,OPENING_TIME = #{openingTime }
			,CLOSING_TIME = #{closingTime }
			,MIN_DELEVERY = #{minDelevery }
			,DELEVERY_TIME = #{deleveryTime }
			,DELEVERY_TIP = #{deleveryTip }
			,STORE_DES = #{storeDes }
		WHERE
		    ID = #{id }  
	</update>
	
	
	<update id="orderAccept">
		<if test="userId == 0">
			UPDATE BM_ORDER_NON_USER SET 
			DELEVERY_STATUS = '처리 중'
			WHERE ORDER_NUM = #{orderNum }
		</if>
		
		<if test="userId != 0">
			UPDATE BM_ORDER_USER SET
			DELEVERY_STATUS = '처리 중'
			WHERE ORDER_NUM = #{orderNum }
		</if>
	</update>
	
	
	
	
	<select id="selectCard" resultType="map">
		SELECT POINT "point", INFO "info" FROM BM_GIFT_CARD WHERE GIFT_CARD_NUM = #{giftCardNum }
	</select>
	
	
	<insert id="pointUpdate" >
		INSERT INTO BM_POINT (
			USER_ID
			,INFO
			,POINT
		) VALUES (
			#{userId }
			,#{info }
			,#{point }
		)
	</insert>
	
	
	
	<select id="getOrderOne" resultType="OrderList">	
	
		SELECT O.*,S.STORE_NAME,C.* FROM 
	   ( SELECT * FROM 
		  ( SELECT COUNT(*) COUNT1 FROM ( SELECT  * FROM bm_order_non_user  UNION ALL SELECT * FROM bm_order_user ) WHERE delevery_status = '주문접수 대기 중' ),
          ( SELECT COUNT(*) COUNT2 FROM ( SELECT  * FROM bm_order_non_user  UNION ALL SELECT * FROM bm_order_user ) WHERE delevery_status = '처리 중' ),
          ( SELECT COUNT(*) COUNT3 FROM ( SELECT  * FROM bm_order_non_user  UNION ALL SELECT * FROM bm_order_user ) WHERE delevery_status = '완료' )) C,	
	   ( SELECT
		    U.order_num, U.user_id, U.order_date, U.pay_method, U.delevery_status, U.phone, U.delevery_address1,
		    U.delevery_address2, U.delevery_address3, UD.store_id, UD.amount, UD.used_point, UD.food_price,
		    UD.total_price, UD.food_info, UD.request
		FROM bm_order_user U LEFT JOIN     
		    bm_order_detail_user UD ON  U.ORDER_NUM = UD.ORDER_NUM
		    
		  UNION ALL 
		 
		SELECT
		    NU.order_num, NU.user_id, NU.order_date, NU.pay_method, NU.delevery_status, NU.phone, NU.delevery_address1,
		    NU.delevery_address2, NU.delevery_address3, NUD.store_id, NUD.amount, NUD.used_point, NUD.food_price,
		    NUD.total_price, NUD.food_info, NUD.request
		FROM bm_order_non_user NU LEFT JOIN 
		    bm_order_detail_non_user NUD ON  NU.ORDER_NUM = NUD.ORDER_NUM  
	) O
	LEFT JOIN
	    BM_STORE S
	ON 
		O.STORE_ID = S.ID
	WHERE 
		ORDER_NUM = #{orderNum }
	
	</select>
	
		
</mapper>
   
   
   